name: Django CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      tmate_debug_enabled:
        type: boolean
        description: "Run this workflow with tmate debugging enabled"
        required: false
        default: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12]

    services:
      mysql:
        image: mysql

        env:
          # The root user is created automatically. No need to be define here.
          MYSQL_DATABASE: ${{ secrets.MYSQL_CI_TEST_DATABASE_NAME }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_CI_TEST_ROOT_PASSWORD }}

        # Health check options for MySQL service:
        # This ensures MySQL server is responsive and healthy before proceeding with workflow steps.
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

        # Exposes port 3306 on the host machine, forwarding traffic to port 3306 inside the MySQL container.
        ports: ["3306:3306"]

    steps:
      - name: Checkout Repository's Source Code
        uses: actions/checkout@v2

      - name: Setup Python Version ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install the pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      # Cache pipenv virtual environments to speed up workflow execution.
      - name: Cache the Virtual Environments
        id: cache-pipenv
        uses: actions/cache@v4
        with:
          # Specify the directory path to cache, which contains pipenv virtual environments.
          path: ~/.local/share/virtualenvs
          # Specify the cache key, which determines when to restore and save the cache.
          # The cache key includes the operating system, a custom string, and a hash of the Pipfile.lock file.
          # This ensures separation by OS and cache invalidation when the Pipfile.lock changes.
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install Dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --deploy --dev

      - name: Run Tests
        run: |
          pipenv run pytest -v -s
        env:
          REPAIR_NINJA_MODE: DEV
          REPAIR_NINJA_DB_ENGINE: django.db.backends.mysql
          REPAIR_NINJA_DB_NAME: ${{ secrets.MYSQL_CI_TEST_DATABASE_NAME }}
          REPAIR_NINJA_DB_HOST: 127.0.0.1
          REPAIR_NINJA_DB_PORT: 3306
          REPAIR_NINJA_DB_USER: root
          REPAIR_NINJA_DB_PASSWORD: ${{ secrets.MYSQL_CI_TEST_ROOT_PASSWORD }}

      - name: Setup tmate Session
        uses: mxschmitt/action-tmate@v3
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.tmate_debug_enabled) || failure() }}

  # This simple deployment action is suitable for a basic deployment to a single remote server.
  # It is not appropriate for more complex deployment scenarios.
  deployment:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Production Deployment
        uses: appleboy/ssh-action@v1.0.3
        if: ${{ vars.DEPLOY != 'false' }}
        with:
          username: ${{ secrets.SSH_USERNAME }}
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            cd ${{ secrets.REMOTE_GIT_PATH }}
            git pull origin
            docker compose -f docker-compose-prod.yaml down
            docker compose -f docker-compose-prod.yaml build
            docker image prune --force
            docker compose -f docker-compose-prod.yaml up -d
